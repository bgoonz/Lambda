window['wistiajsonp-/embed/medias/cu101kblpe.jsonp'] = {"media":{"assets":[{"type":"original","slug":"original","display_name":"Original file","details":{},"width":1920,"height":1080,"size":26743918,"bitrate":559,"public":true,"status":2,"progress":1.0,"metadata":{"served_by_media_api":1},"url":"https://embed-ssl.wistia.com/deliveries/a5869903da7c62a265657fab9f4324f1.bin","created_at":1612462770},{"type":"iphone_video","slug":"mp4_h264_217k","display_name":"360p","details":{},"container":"mp4","codec":"h264","width":640,"height":360,"ext":"mp4","size":10417900,"bitrate":217,"public":true,"status":2,"progress":1.0,"metadata":{"max_bitrate":47266,"early_max_bitrate":36825,"average_bitrate":27887,"av_stream_metadata":"{\"Video\":{\"Codec ID\":\"avc1\"},\"Audio\":{\"Codec ID\":\"mp4a-40-2\"}}"},"url":"https://embed-ssl.wistia.com/deliveries/dba5c91b03eafd57f3f564144008115ee4ce0893.bin","created_at":1612462770,"segment_duration":3,"opt_vbitrate":1200},{"type":"md_mp4_video","slug":"mp4_h264_544k","display_name":"1080p","details":{},"container":"mp4","codec":"h264","width":1920,"height":1080,"ext":"mp4","size":26049652,"bitrate":544,"public":true,"status":2,"progress":1.0,"metadata":{"max_bitrate":179053,"early_max_bitrate":118475,"average_bitrate":69732,"av_stream_metadata":"{\"Video\":{\"Codec ID\":\"avc1\"},\"Audio\":{\"Codec ID\":\"mp4a-40-2\"}}"},"url":"https://embed-ssl.wistia.com/deliveries/3aa1a3604211d20d83a5fd30cf63cc8c16394aae.bin","created_at":1612462770,"segment_duration":3,"opt_vbitrate":670.8},{"type":"storyboard","slug":"storyboard_2000x2260","display_name":"Storyboard","details":{},"width":2000,"height":2260,"ext":"jpg","size":382766,"bitrate":0,"public":true,"status":2,"progress":1.0,"metadata":{"frame_width":200,"frame_height":113,"frame_count":200,"av_stream_metadata":"null","aspect_ratio":1.7777777777777777},"url":"https://embed-ssl.wistia.com/deliveries/7cb246c9a36da00dd35003c15ccbd4ff18640a72.bin","created_at":1612462770},{"type":"still_image","slug":"still_image_3840x2160","display_name":"Image","details":{},"width":3840,"height":2160,"size":63160,"bitrate":0,"public":true,"status":2,"progress":1.0,"metadata":{"served_by_media_api":1},"url":"https://embed-ssl.wistia.com/deliveries/67ba0356b6157deada7f96cd1d608697.bin","created_at":1613068983}],"distilleryUrl":"https://distillery.wistia.com/x","accountKey":"wistia-production_963575","mediaKey":"wistia-production_68205178","type":"Video","mediaType":"Video","progress":1.0,"status":2,"name":"Return and Scope - Full Stack Web","duration":373.457,"hashedId":"cu101kblpe","branding":false,"enableCustomerLogo":true,"seoDescription":"a 01 - Web Fundamentals video","preloadPreference":null,"flashPlayerUrl":"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2017-04-20","showAbout":true,"createdAt":1612462770,"firstEmbedForAccount":false,"firstShareForAccount":false,"useMediaDataHostLogic":true,"projectId":5681166,"stats":{"loadCount":260,"playCount":93,"uniqueLoadCount":139,"uniquePlayCount":68,"averageEngagement":0.649209},"trackingTransmitInterval":10,"integrations":{},"captions":[{"language":"eng","text":"in this video you will learn to explain\n\nfunction skill and the return statement\n\nalright back to the cookie analogy\n\nthings are going great fresh cookies\n\nevery day until suddenly your robot\n\nstarts burning the lemon crisp cookies\n\ncome on robot to fix this you decide to\n\nadd a parameter temperature such that\n\nyou can specify how your robot should be\n\nbaking cookies so now bake cookies\n\nchocolate chip comma 400 and bake\n\ncookies lemon crisps , 350 are valid\n\nfunctions but later on you go to print a\n\nrecipe probably for a cookie baking\n\nrobot friend with console dot log\n\ntemperature and it comes back as\n\nundefined what isn't it clearly defined\n\nin the function you've just run into\n\nyour first scoping issue scope is\n\ndesigned as which variables we currently\n\nhave access to and where so far in this\n\ncourse we've been working mostly in the\n\nglobal scope in that we can access any\n\nvariable we have created anywhere in our\n\ncode there are a couple different levels\n\nof scope block global scope is used in\n\nif statements and for loops in block\n\nlevel scope a variable is declared using\n\nletter Const is only available within\n\nthe statement or loop like I in a for\n\nloop similarly there is function scope\n\nwhere temperature exists inside the\n\nfunction but not elsewhere in your code\n\nfile function scope allows us to create\n\nvariables inside functions that are\n\nessentially private to that function we\n\ncannot reach into a function from the\n\noutside and get access to these\n\nvariables but we are free to use these\n\nvariables anywhere within our function\n\nconversely we do not have access to the\n\nvariables outside of the function it's\n\nlike a one-way street functions can\n\nreach out and grab variables outside of\n\ntheir scope but we cannot reach into a\n\nfunction to get a variable because var 2\n\nis defined inside the function it can't\n\nbe accessed later on bar one however is\n\nglobal and it can be accessed anywhere\n\nin our script so we will not always want\n\na console.log everything that comes out\n\nof a function more likely we will want\n\nto return something for use in other\n\noperations the only way for us to\n\nget data local to a function outside of\n\nthe function is with the keyword return\n\nreturn essentially let's data escape a\n\nfunction nothing other than what is\n\nreturned can be accessed outside of the\n\nfunction a return is also always the\n\nlast thing in a function because when\n\nthe function hits a return statement the\n\nfunction immediately stops executing\n\ncode it stops everything else that it\n\nwas doing we can also assign the value\n\nof a return statement to another\n\nvariable and then we will have access to\n\nthe data returned from the function\n\neverywhere in our code important to note\n\nwe will never be able to have access to\n\nthe actual variable created in the\n\nfunction we will only have access to the\n\ndata that that variable was assigned to\n\nso when we left off on our flip function\n\nit logged a result of any number of coin\n\nflips our challenge now is going to be\n\nto include a summative number that\n\ncalculates the proportion of heads over\n\ntotal flips\n\nso if flip returned heads four times and\n\ntails six times our function should\n\nreturn not only a list of four heads and\n\nsix tails should also return zero point\n\nfour in order to perform this\n\ncalculation will utilize a common\n\nprogramming check and create a counter\n\ncalled count heads now it's time for the\n\nwe do where we get to practice these\n\nskills together you should be coding\n\nalong with me during this portion of the\n\nvideo\n\nin order to perform this calculation\n\nwill utilize a common programming trick\n\nand create a counter called count heads\n\nthis counter will be declared with bar\n\nand we'll add one to it every time the\n\nflip lands on heads or when coin flip\n\nequals one to make this counter\n\nfunctional we have to rely on scope it\n\nwill be important that we declare the\n\nvariable outside of the loop but inside\n\nthe function this way the variable can\n\nbe referenced and changed inside of the\n\nfor loop but it will reset to zero every\n\ntime the function is run so we need to\n\nadd a new line inside the function but\n\noutside the for loop where we'll declare\n\nour variable count heads with bar and\n\nset it equal to an initial value of zero\n\nin addition we'll want to create a\n\nreturn statement at the end of our\n\nfunction that returns the total number\n\nof counted heads over the number of\n\nrepetitions in our script if we ran this\n\nfunction we'd get all 100 of our heads\n\nand tails and then a summative number\n\ntelling us what percent was head so in\n\nthis example 0.5 4 or 54% of our flips\n\nwere heads we ran it again point 4 6 so\n\n46 percent of our flips were heads this\n\nis showing us that our scope is good and\n\nthat our function is working as expected\n\nto further demonstrate the importance of\n\nscope let's consider a few non examples\n\nwhere count heads is out of scope to be\n\ncompletely clear the examples are about\n\nto walk through our bad programming\n\npractice they don't work and you should\n\nnever code like this but they are really\n\nuseful to illustrate the importance of\n\nscope when count heads is outside of our\n\nfunction our program would work\n\nperfectly fine the first time we called\n\nflip at X but it would not reset if we\n\ncalled it again so let's try this let's\n\nmove our variable declaration outside\n\nthe function and let's call the function\n\njust once with flip five\n\nas we can see we get a number close to\n\n0.5 as we expected 0.4 if we ran it\n\nagain we're only calling it once so\n\nagain we'd be in the right range but\n\nlet's try calling flip five maybe three\n\ntimes when we do this we can see that\n\nour percentage becomes 200% and very\n\nobviously that is an impossible number\n\ngiven our results here this is because\n\nthe variable is outside of the function\n\nscope and not resetting when the\n\nfunction is called\n\nnow that we've seen the good and the\n\ndifficult parts of function scope go\n\nahead and read through the content below\n\nwork on this example and then try the\n\nscope and return statements challenge"}],"hls_enabled":true,"embed_options":{"volumeControl":"true","fullscreenButton":"true","controlsVisibleOnLoad":"true","playerColor":"2d539d","bpbTime":"false","plugin":{"captions-v1":{"language":"","onByDefault":"true","on":"true","async":"false"}},"vulcan":"true","videoQuality":"","customerLogoImageUrl":"https://embed-ssl.wistia.com/deliveries/84ff8db598cacccd55aaec59e009e87c.bin","showCustomerLogo":"true","unalteredStillImageAsset":{"url":"https://embed-ssl.wistia.com/deliveries/67ba0356b6157deada7f96cd1d608697.png","width":"3840","height":"2160"},"thumbnailAltText":"Classes","branding":"false","playsinline":true}},"options":{}};
window['wistiajsonp-/embed/medias/cu101kblpe.jsonp'] = window['wistiajsonp-/embed/medias/cu101kblpe.jsonp'];
