window['wistiajsonp-/embed/medias/y41h1vbotr.jsonp'] = {"media":{"assets":[{"type":"original","slug":"original","display_name":"Original file","details":{},"width":1920,"height":1080,"size":25676053,"bitrate":223,"public":true,"status":2,"progress":1.0,"metadata":{"served_by_media_api":1},"url":"https://embed-ssl.wistia.com/deliveries/fb21ba8831cc15e8f4ce22c2f6cd7c41.bin","created_at":1612463649},{"type":"iphone_video","slug":"mp4_h264_183k","display_name":"360p","details":{},"container":"mp4","codec":"h264","width":640,"height":360,"ext":"mp4","size":21084683,"bitrate":183,"public":true,"status":2,"progress":1.0,"metadata":{"max_bitrate":31543,"early_max_bitrate":31543,"average_bitrate":23479,"av_stream_metadata":"{\"Video\":{\"Codec ID\":\"avc1\"},\"Audio\":{\"Codec ID\":\"mp4a-40-2\"}}"},"url":"https://embed-ssl.wistia.com/deliveries/9fce5c09738e6eb07cb55750840d5b330020d6b5.bin","created_at":1612463649,"segment_duration":3,"opt_vbitrate":1200},{"type":"md_mp4_video","slug":"mp4_h264_286k","display_name":"1080p","details":{},"container":"mp4","codec":"h264","width":1920,"height":1080,"ext":"mp4","size":32948943,"bitrate":286,"public":true,"status":2,"progress":1.0,"metadata":{"max_bitrate":62252,"early_max_bitrate":62252,"average_bitrate":36691,"av_stream_metadata":"{\"Video\":{\"Codec ID\":\"avc1\"},\"Audio\":{\"Codec ID\":\"mp4a-40-2\"}}"},"url":"https://embed-ssl.wistia.com/deliveries/56a37cf6d41a3efa44124a9a39eecbaedb3b652a.bin","created_at":1612463649,"segment_duration":3,"opt_vbitrate":500},{"type":"storyboard","slug":"storyboard_2000x2260","display_name":"Storyboard","details":{},"width":2000,"height":2260,"ext":"jpg","size":422911,"bitrate":0,"public":true,"status":2,"progress":1.0,"metadata":{"frame_width":200,"frame_height":113,"frame_count":200,"av_stream_metadata":"null","aspect_ratio":1.7777777777777777},"url":"https://embed-ssl.wistia.com/deliveries/53d57b5861c5854428558bde0c679f0a69558179.bin","created_at":1612463649},{"type":"still_image","slug":"still_image_3840x2160","display_name":"Image","details":{},"width":3840,"height":2160,"size":57595,"bitrate":0,"public":true,"status":2,"progress":1.0,"metadata":{"served_by_media_api":1},"url":"https://embed-ssl.wistia.com/deliveries/0b9d139fd681b1f535ac838437075a38.bin","created_at":1613069005}],"distilleryUrl":"https://distillery.wistia.com/x","accountKey":"wistia-production_963575","mediaKey":"wistia-production_68206021","type":"Video","mediaType":"Video","progress":1.0,"status":2,"name":"Closures","duration":897.9,"hashedId":"y41h1vbotr","branding":false,"enableCustomerLogo":true,"seoDescription":"a 01 - Web Fundamentals video","preloadPreference":null,"flashPlayerUrl":"https://embed-ssl.wistia.com/flash/embed_player_v2.0.swf?2017-04-20","showAbout":true,"createdAt":1612463649,"firstEmbedForAccount":false,"firstShareForAccount":false,"useMediaDataHostLogic":true,"projectId":5681166,"stats":{"loadCount":194,"playCount":87,"uniqueLoadCount":101,"uniquePlayCount":62,"averageEngagement":0.631353},"trackingTransmitInterval":10,"integrations":{},"captions":[{"language":"eng","text":"[Music]\n\nthis video is all about closures in\n\nJavaScript at the end of this lesson you\n\nwill be able to describe what a closure\n\nis how closure is created in a\n\nJavaScript program and why it's\n\nimportant to understand closures in\n\nJavaScript let's start with that last\n\nthing this is a really important thing\n\nthe content found in this video will\n\npotentially cover JavaScript interview\n\nquestions that are commonly asked so\n\nit's important that you can draw back\n\nthis information at some point as you've\n\nreached a certain point in your\n\ndevelopment experience we don't expect\n\nyou to be masters of closure closures\n\none of those concepts that you\n\nunderstand with time it's something that\n\nyou it's it's it's not all about just\n\nlike understanding the fundamental\n\nprinciples and all the intricacies about\n\nit it's more on the lines of\n\nunderstanding that oh yeah this thing\n\nright here is a closure for example if\n\nyou're driving in your car down the road\n\nyou're not necessarily thinking directly\n\nabout turning on your turn signal before\n\nyou change lanes you're just doing that\n\ninnately you're not really thinking\n\nabout the gas and the brake pedal and\n\nhow they work intricately you're just\n\ndoing that subconsciously those are\n\nthings that you just do that's kind of\n\nhow this this concept sinks in but it's\n\nimportant to understand that it's in\n\nJavaScript and we're gonna do a deep\n\ndive on it for our guided demo when we\n\nlearn about it in the morning so when\n\nyou're searching for a job\n\nI recommend coming back to this material\n\nand looking at this video again you know\n\nonce you've gotten to that point in the\n\nprogram being like oh yeah what was that\n\nthing that Ryan and Josh talked to me\n\nabout okay let's take a look at closures\n\nlet's see kind of what they are\n\ndefinition wise a closure is a\n\ncombination of a function and the\n\nlexical environment with within which\n\nthat function was declared\n\nthat sounds very technical there's a lot\n\nof jargon there but we're gonna we're\n\ngonna make sure that that makes sense\n\nessentially when a function is declared\n\na new scope is created we call that a\n\nfunctional scope okay the variables or\n\nfunctions declared within that function\n\nokay\n\nhave the ability to reach outward for\n\ncontext okay so if you have a function\n\nthat's referencing some sort of variable\n\noutside of its context that's when a\n\nclosure happens okay so this paradigm\n\nremains true no matter how deep you nest\n\nyour functions you can have a function\n\nwith 1500 different functions nested\n\nwith inside of it and they're going to\n\ncreate their own execution functional\n\nscoping and context okay now if you have\n\na variable declared all the way in the\n\nouter scope so not even within that\n\nfunction basically and you're\n\nreferencing it within the the inner\n\nworkings of the most deeply nested\n\nfunction the the way that JavaScript\n\nworks is it'll reach outside all of\n\nthose scopes and contexts to find the\n\nvariable that you're referencing okay\n\nso let's see what this kind of looks\n\nlike with code in this example we've\n\ndeclared foo foo is simply set to a\n\nstring has an assignment of a string bar\n\nwe have a function and both of these\n\ndeclarations the Const foo and the\n\nfunction return foo are declared in the\n\nglobal scope okay so it's important to\n\nkind of understand that these two things\n\nhere Const foo and function return foo\n\nare declared in the outer scope of this\n\nof this program now inside of the\n\ninternal scope of return foo we have a\n\nfunction that's returning foo okay so\n\nwhen that returns it's going to actually\n\nprint bar so the concept here is that\n\nthe code inside of return foo okay which\n\nis returning the foo variable has access\n\nto the outside scope or the code that is\n\noutside of return foo so that's the\n\nimportant concept here there is a\n\nclosure created\n\nbetween this context of this function\n\nreturn' Phu and the outer scope so when\n\nwe recall return Phu it's as if our\n\nvariable is the program is gonna ask\n\nitself hey do you have Phu and return\n\nFu's gonna say I don't have food let me\n\nlook at my outer scope to find it ok\n\nthat's that's more or less the concept\n\nhere so once we call return foo we're\n\ngoing to get bar okay that's good let's\n\nlook at an example number two so we have\n\nconstant our outer scope then we have\n\nthis function called greet okay we have\n\na first name declared as James and then\n\nlast name outside declared as bombed\n\nokay so we're gonna alert at the time\n\nthat this function runs we're gonna\n\nalert the names bond James Bond okay\n\nso there's an important distinction to\n\nunderstand here right you can get as\n\nnested as you'd like within this this\n\nparadigm so if I declared another\n\nfunction that was nested underneath this\n\nother function inside of greet I could\n\nhave access to all of the outer scope\n\nvariables the principle to understand is\n\nthat I don't have access to the inner\n\nvariables from with from the outside in\n\nso I couldn't outside in this global\n\ncontext reference first name anywhere in\n\nmy code that's only going to exist\n\nwithin here so when we're thinking in\n\nterms of closure and context when the\n\nfunction gets called what variables do I\n\nhave access to and that's the that's\n\nkind of the break down the definition of\n\nwhat closures are now there's a lot more\n\nto it we're gonna go over that in our in\n\nour follow along example so why don't\n\nyou pull open code pen go to your\n\ntraining kit and look at the example\n\nthere copy and paste that over to a\n\nconan code pen instance and we'll get\n\nstarted\n\nokay now that we've rounded you up we're\n\nall in code pen I'm gonna bump up my\n\nscreen size just a little bit that might\n\ndrive me a little crazy but I think\n\nwe're fine okay so we're gonna make a\n\nlittle counter function notice we're\n\nusing arrow phone\n\nhere there's there's very little\n\ndifference between a function with the\n\nfunction keyword and the actual arrow\n\nfunction there are some intricate\n\ndifferences so it's very important to\n\nlook those up and you have learned a\n\nlittle bit about those I know that Josh\n\ngoes in those he goes into those\n\nthoroughly but yes ask us ask your PMS I\n\ndon't understand the difference between\n\narrow on a function keyword let's figure\n\nit out together okay\n\nyou can definitely exercise your Google\n\nfoo in that in that context so this is a\n\npretty simple example what we want is we\n\nwant a function that's going to be\n\ninvoked so we can capture a reference to\n\nthat function in a variable which if\n\nit's set equal to the function\n\ninvocation of counter we can just invoke\n\nit like another function so that's what\n\nwe're trying to achieve here so we're\n\ngonna build a little counter function\n\nthat when invoked we're going to hold on\n\nto the memory of the last time in which\n\nthe function was called okay so a little\n\nbit of this is this is where closures\n\nbecome very important to understand is\n\nthat we get this execution context and\n\nwe can hold on to memory as if it's like\n\nits own little miniature computer that's\n\nkind of how I like to think about and\n\napproach these closures okay so I'm\n\ngoing to let a variable called count\n\ntyoma set that equal to zero because we\n\nneed a good place holder and it's going\n\nto be a numerical value and then\n\nremember this is a function that returns\n\na function that when invoked increments\n\nand returns a counter variable so that's\n\nwhat we're that's what we're up to\n\nokay so I am going to return and there's\n\nmultiple ways you can do this you can\n\njust pass an anonymous function and that\n\nfunction will then create a closure\n\nbetween the context of this variable and\n\nthen and then when it's you know and and\n\nand the new updated value of that\n\nvariable okay so we're going to return\n\nthe count of course but we want to\n\nmutate the count by saying something\n\nalong the lines of\n\ncount equals count plus one there's\n\ngoing to increment it by one now there\n\nis a shortcut that I will show you as to\n\nhow this works but this is kind of crazy\n\nthis is kind of a crazy this looks\n\nreally weird and it's really unfamiliar\n\nwe have a function counter that when\n\ninvoked is going to return an anonymous\n\nfunction okay with this context this\n\ncould very well be sort of refactored to\n\nuse an arrow function if you'd like but\n\nwe're just gonna keep with the function\n\nkeyword for now and then we'll play\n\naround with it okay so in this simple\n\nexample when we invoke counter we're\n\ngoing to return the invocation of an\n\nanonymous function so we get at hand\n\nsort of a scoping environment that is\n\nkeeping track of this variable so now\n\nevery time that we reinvent stood is\n\nfunction it should do what we are\n\nsupposed to have done with this but we\n\nneed to set it up in this manner so I'm\n\ngoing to create a new counter and set\n\nthat equal to the function invocation\n\nhere okay I want to at this time console\n\ndot log new counter okay just so we can\n\nsee it in the console notice what new\n\ncounter is new counter is our anonymous\n\nfunction because that's what counter\n\nreturns it's a reference to this\n\nfunction here okay so now I can invoke\n\nnew counter and hopefully achieve the\n\nresult that we're looking for so if I do\n\nthat what happens when I actually invoke\n\nit well let's see if it logs it gives us\n\none okay now if I do this again we\n\nshould hold the next context for the\n\nnext time that it's invoked so we have\n\nourselves a really useful problem here\n\nuseful parent program this program is\n\ngoing to keep track of that memory okay\n\nif I was to so so why is this important\n\nwhy why does this work the way that\n\nwe're expect\n\n- well if this would not be possible\n\nwithout closure so let's take a look\n\nlet's refactor this for a second I'm\n\ngonna leave that count but what if\n\ninstead we just returned our count but\n\nwe did the same incrementing before we\n\nreturned it well every single time that\n\nwe do this it's not going to give us the\n\nthe result that we expect it to because\n\nwhat's gonna happen is this code is\n\ngonna go ahead I got a console log that\n\nit's gonna go ahead and get basically\n\ngarbage collected is what we call that\n\nokay so I could call this as many times\n\nas I'd like and it's still gonna be the\n\nsame result every single time let me\n\nclear that and we'll do it one more time\n\nnotice that's all gonna be one this is\n\nwhere the closure actually makes this\n\nthing work\n\nbecause we have no context we have no\n\nmemory of this one actually getting\n\nincremented okay so when we wrap it in\n\nthe closure we can actually store that\n\nin memory okay in a longer term space of\n\nmemory within our computer as opposed to\n\nas opposed to just wiping away that\n\nfunction call which is the big point to\n\nthis whole entire conversation that once\n\nwe do something like this we are\n\nessentially saying I am I am keeping\n\ntrack of this counter okay now I know\n\nthis is really foreign and unfamiliar\n\nand a little bit scaring but there's a\n\ncouple of assignments that we want you\n\nto to kind of go through in your\n\ntraining kit that will help you sort of\n\nprepare for the lecture tomorrow where\n\nwe will go into this at length okay and\n\nyou'll get you'll get exposure to this\n\nat ad nauseam you're gonna get a really\n\nflourish with it I told you there's a\n\nthere's a shortcut to this okay so\n\ninstead of just returning instead of\n\nincrementing the count in fact I'll\n\nleave that now commented out but I can\n\nsimply return the previous value of the\n\none or\n\nthe one being added to count by just\n\nsimply putting a plus plus before the\n\ncount and that should behave the same\n\nway that we expect it to and in the\n\nfirst case it was 1 in the second case\n\nit was 2 and you could do this as many\n\ntimes as you would like okay let it run\n\nand we have memory we have a program\n\nthat executes a program and remembers\n\nthe previous results of the last time\n\nthat it was invoked and that's the power\n\nof closure at a very high level and\n\nyou're going to have a really fun time\n\nlearning more about that so stay tuned\n\nfor more information on closures if you\n\nhave any questions or comments there is\n\na dig deeper section with four plus\n\narticles that are phenomenal at breaking\n\ndown what closures are so if you want to\n\nget a head start into tomorrow's guided\n\ndemo you can jump right in there or if\n\nthis just went all the way over your\n\nhead you can rewatch you can go back you\n\ncan go through the material and ask\n\nquestions ok this is a very deep level\n\nprogramming principle and it's a big\n\npart of the JavaScript ecosystem and I\n\ncan tell you from experience I have been\n\nasked multiple times in JavaScript\n\ninterview questions what is a closure\n\nfor one reason or another companies are\n\njust starving to to hear your answer on\n\nthat question hopefully by the end of\n\ntoday and tomorrow you have a good way\n\nof answering that and if you don't don't\n\nworry it'll sink in time will come\n\nthanks for tuning in we'll talk to you\n\nsoon"}],"hls_enabled":true,"embed_options":{"volumeControl":"true","fullscreenButton":"true","controlsVisibleOnLoad":"true","playerColor":"2d539d","bpbTime":"false","plugin":{"captions-v1":{"language":"","onByDefault":"true","on":"true","async":"false"}},"vulcan":"true","videoQuality":"","customerLogoImageUrl":"https://embed-ssl.wistia.com/deliveries/84ff8db598cacccd55aaec59e009e87c.bin","showCustomerLogo":"true","unalteredStillImageAsset":{"url":"https://embed-ssl.wistia.com/deliveries/0b9d139fd681b1f535ac838437075a38.png","width":"3840","height":"2160"},"thumbnailAltText":"Classes","branding":"false","playsinline":true}},"options":{}};
window['wistiajsonp-/embed/medias/y41h1vbotr.jsonp'] = window['wistiajsonp-/embed/medias/y41h1vbotr.jsonp'];
